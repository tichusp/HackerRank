The problem

CubeCraft is a game consisting entirely of cubes (or voxels) having a side length equal to 1, and each voxel's vertices have integer coordinates.
After playing this game for a while, Jessie is eager to create something impressive so she decides to build a lighthouse.

First, Jessie decides she wants the lighthouse to have a round base; because there is no such thing as a perfect circle in a cubic world,
she defines a circle with integer radius r to be the set of all cubes having centers with a Euclidean distance to the center of the circle
(which coincides with the center of some cube)<=r. Because r is the Euclidean distance between the center points of two cubes, the value of r for a single cube is 0.

Next, she chooses an n x n grid for the base of the lighthouse. This presents some difficulty for Jessie because there are landscape features (e.g., rocks, trees, etc.) in the grid.
She doesn't want to change the landscape and cannot build over it, so she must find the maximum radius of any circle she can place inside the grid's free space (i.e., where no landscape
obstructions are contained within the confines of the circle). Note that circle have to be placed completely inside the grid, i.e. there should be no points with euclidean distance to the
center <=r outside the grid.

Given n and the landscape features of Jessie's grid, find and print the maximum possible value of r.

Input Format

The first line contains an integer, , denoting the side dimensions of the grid where Jessie wants to build the lighthouse.
Each line i of the n subsequent lines contains a string of n characters describing the landscape features of row i in the grid.
A . indicates that (i, j, 1) is empty, and a * indicates that it's obstructed.

Constraints

1 <= n <= 50

It is guaranteed that the grid contains at least one empty cell (i.e., input will always contain at least one . character).

Output Format

Print the value of r denoting the maximum integer radius of the circle Jessie can place inside the grid's free space (recall that r may be 0).

The solution

function processData(input) {
    input = input.split('\n')
    var n = +input[0];
    input = input.slice(1).map(val => val.split(''));
    var max = [];
    for (var o = 0; o < n; o++) {
        for (var p = 0; p < n; p++) {
            let test1 = Math.floor(n / 2) - Math.abs(Math.floor(n / 2) - o);
            let test2 = Math.floor(n / 2) - Math.abs(Math.floor(n / 2) - p);
            let z = Math.min(test1, test2);
            if ((o >= Math.floor(n / 2) || p >= Math.floor(n / 2)) && n % 2 === 0) {
                z--;
            }
            let area = [];
            for (var m = o - z; m <= o + z; m++) {
                for (var l = p - z; l <= p + z; l++) {
                    if (Math.pow(m - o, 2) + Math.pow(l - p, 2) <= Math.pow(z, 2)) {
                        area.push([m, l, Math.sqrt(Math.pow(m - o, 2) + Math.pow(l - p, 2))]);
                    }
                }
            }
            area.sort((a, b) => b[2] - a[2]);
            while (area.length && area.some(val => input[val[0]][val[1]] === '*')) {
                let qq = area.findIndex(val => val[2] === area[0][2] - 1);
                if (qq !== - 1) {
                    area = area.slice(qq);
                } else {
                    area = [];
                }
            }
            max.push(area.length ? area[0][2] : 0);
        }
    }
    console.log(Math.max(...max));
}

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});
